;;; Copyright © 2020  Roel Janssen <roel@gnu.org>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(define-module (www db data-access-requirements)
  #:use-module (ice-9 receive)
  #:use-module (ice-9 regex)
  #:use-module (ice-9 format)
  #:use-module (rnrs bytevectors)
  #:use-module (rnrs io ports)
  #:use-module (json)
  #:use-module (sparql util)
  #:use-module (srfi srfi-1)
  #:use-module (web client)
  #:use-module (web response)
  #:use-module (www config)
  #:use-module (www util)
  #:use-module (logger)

  #:export (all-study-ids
            all-dataset-ids
            datasets-by-study-id
            dataset-ac
            add-submission
            %additional-limitation-terms))

(define %metadata-graph "https://udac.ubec.nl")

(define %prefixes
  (format #f "~{PREFIX ~a~%~}"
          (map (lambda (item)
                 (format #f "~12a <~a>"
                         (symbol-append (car item) ':)
                         (cdr item)))
               '((dc           . "http://purl.org/dc/elements/1.1/")
                 (dcterms      . "http://purl.org/dc/terms/")
                 (dctype       . "http://purl.org/dc/dcmitype/")
                 (duo          . "http://purl.obolibrary.org/obo/")
                 (prov         . "http://www.w3.org/ns/prov#")
                 (rdf          . "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                 (rdfs         . "http://www.w3.org/2000/01/rdf-schema#")
                 (sgf          . "sgf://@VERSION@/")
                 (xsd          . "http://www.w3.org/2001/XMLSchema#")))))

(define %additional-limitation-terms
  '(("DUO_0000012" . "Research-specific restrictions")
    ("DUO_0000014" . "Research use only")
    ("DUO_0000015" . "No “general methods” research")
    ("DUO_0000016" . "Genetics studies only")
    ("DUO_0000018" . "Not-for-profit use only")
    ("DUO_0000019" . "Publication required")
    ("DUO_0000020" . "Collaboration required")
    ("DUO_0000021" . "Ethics approval required")
    ("DUO_0000022" . "Geographical restriction")
    ("DUO_0000024" . "Publication moratorium")
    ("DUO_0000025" . "Time limit on use")
    ("DUO_0000026" . "User-specific restriction")
    ("DUO_0000027" . "Project-specific restriction")
    ("DUO_0000028" . "Institution-specific restriction")
    ("DUO_0000029" . "Return to database/resource")))

;; ----------------------------------------------------------------------------
;; STORAGE
;; ----------------------------------------------------------------------------

(define (add-submission post-data)

  (define (checked post-data checkboxes)
    (delete #f (map (lambda (box) (if (assoc-ref post-data box) box #f))
                    (map string->symbol
                         (map car checkboxes)))))

  (catch #t
    (lambda _
      (let ((get    (lambda (field) (assoc-ref post-data field)))
            (empty  (lambda (field) (or (not field)
                                        (not (string? field))
                                        (string= field "")))))
        (let ((access-type                 (get 'access-type))
              (additional-communication    (get 'additional-communication))
              (additional-limitations      (checked post-data %additional-limitation-terms))
              (data-controller-agreed      (get 'data-controller-agreed))
              (additional-measures         (get 'additional-measures))
              (citing                      (get 'citing))
              (collaborators               (get 'collaborators))
              (consent-form-location       (get 'consent-form-location))
              (data-administrative-owners  (get 'data-administrative-owners))
              (data-producer               (get 'data-producer))
              (dataset-id                  (get 'dataset-id))
              (dataset-title               (get 'dataset-title))
              (email-address               (get 'email-address))
              (minimum-protection-measures (get 'minimum-protection-measures))
              (other-use-limitations       (get 'other-use-limitations))
              (principal-investigator      (get 'principal-investigator))
              (project-website             (get 'project-website))
              (submission-date             (get 'submission-date))
              (dul-radio                   (get 'dul-radio)))
          (cond
           ;; FORM VALIDATION
           ;; -----------------------------------------------------------------
           [(or (empty access-type)
                (empty dataset-id)
                (empty dataset-title)
                (empty email-address)
                (empty principal-investigator)
                (empty submission-date)
                (empty dul-radio)
                (not data-controller-agreed))
            (throw 'error #t)]
           [(not (every not
                        (map (lambda (field)
                               (string-is-longer-than field 255))
                             (map cdr post-data))))
            (throw 'error "Exceeded the limit of 512 characters per field.")]
           [(not (string-match
                  "[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])"
                  submission-date))
            (throw 'error "The date must be in format YYYY-MM-DD")]

           ;; INSERT TO DATABASE
           ;; -----------------------------------------------------------------
           [else
            (let* ((registration-date (format #f "~s^^xsd:dateTimeStamp"
                                              (strftime "%Y-%m-%dT%H:%M:%SZ" (gmtime (current-time)))))
                   (escape  (lambda (text) (format #f "~s" text)))
                   (form-id (random-ascii-string 64))
                   (query   (string-append
                             %prefixes
                             "INSERT INTO <" %metadata-graph "> {"
                             " sgf:" form-id " rdf:type sgf:FormSubmission ;"
                             " sgf:accessType sgf:"                access-type " ;"
                             " sgf:registrationDate "              registration-date " ;"
                             " sgf:submissionDate "                (escape submission-date) " ;"
                             " sgf:datasetId "                     (escape dataset-id) " ;"
                             " sgf:datasetTitle "                  (escape dataset-title)" ;"
                             " sgf:principalInvestigator "         (escape principal-investigator) " ;"
                             " sgf:dataUsageLicense duo:"          dul-radio " ;"
                             " sgf:emailAddress "                  (escape email-address) " ;"
                             (if (not (empty project-website))
                                 (format #f " sgf:projectWebsite ~s ;" project-website)
                                 "")
                             (if (not (empty additional-communication))
                                 (format #f " sgf:communication ~s ;" additional-communication)
                                 "")
                             (if (not (empty additional-measures))
                                 (format #f " sgf:additionalMeasures ~s ;" additional-measures)
                                 "")
                             (if (not (empty citing))
                                 (format #f " sgf:citation ~s ;" citing)
                                 "")
                             (if (not (empty collaborators))
                                 (format #f " sgf:collaborators ~s ;" collaborators)
                                 "")
                             (if (not (empty consent-form-location))
                                 (format #f " sgf:consentFormLocation ~s ;" consent-form-location)
                                 "")
                             (if (not (empty data-producer))
                                 (format #f " sgf:dataProducer ~s ;" data-producer)
                                 "")
                             (if (not (empty data-administrative-owners))
                                 (format #f " sgf:administrativeOwners ~s ;" data-administrative-owners)
                                 "")
                             (if (not (empty minimum-protection-measures))
                                 (format #f " sgf:minimumProtectionMeasures ~s ;" minimum-protection-measures)
                                 "")
                             (if (not (empty other-use-limitations))
                                 (format #f " sgf:otherUseLimitations ~s ;" other-use-limitations)
                                 "")
                             " sgf:dacIsPrimaryController \""
                             (if data-controller-agreed "true" "false") "\"^^xsd:boolean ."
                             "}")))

              (receive (header body)
                  (system-sparql-query query)
                (if (= (response-code header) 200)
                    #t
                    (begin
                      (log-error "add-submission" "Failed with error:~%~a"
                                 (get-string-all body))
                      #f))))
            (throw 'success post-data)]))))
    (lambda (key . args)
      (if (eq? key 'success)
          (values #t #f)
          (values #f args)))))

;; ----------------------------------------------------------------------------
;; AUTOCOMPLETION
;; ----------------------------------------------------------------------------

(define (dataset-ac)
  (let ((query (string-append
                default-prefixes
                "SELECT ?studyId ?datasetId datasetTitle"
                " FROM <" %metadata-graph ">"
                " WHERE {"
                " ?r col:study_id ?studyId ."
                " ?r col:dataset_id ?datasetId ."
                " ?r col:dataset_title ?datasetTitle ."
                " }")))
    (map car (query-results->list
              (system-sparql-query query) #t))))

(define (all-study-ids)
  (let ((query (string-append
                default-prefixes
                "SELECT ?studyId FROM <" %metadata-graph ">"
                " WHERE { ?r col:study_id ?studyId . }")))
    (map car (query-results->list
              (system-sparql-query query) #t))))

(define (all-dataset-ids)
  (let ((query (string-append
               default-prefixes
               "SELECT ?datasetId FROM <" %metadata-graph ">"
               " WHERE { ?r col:dataset_id ?datasetId . }")))
    (map car (query-results->list
              (system-sparql-query query) #t))))

(define (datasets-by-study-id study-id)
  (let ((query (string-append
               default-prefixes
               "SELECT ?datasetId FROM <" %metadata-graph ">"
               " WHERE { ?r col:dataset_id ?datasetId ; col:study_id \""
               study-id "\"^^xsd:string. }")))
    (map car (query-results->list
              (system-sparql-query query) #t))))

(define (dataset-name-by-id dataset-id)
  (let* ((query (string-append
                 default-prefixes
                 "SELECT ?name FROM <" %metadata-graph ">"
                 " WHERE { ?r col:dataset_id \"" dataset-id
                 "\"^^xsd:string ; col:dataset_title ?name . }"))
         (results (query-results->list
                   (system-sparql-query query) #t)))
    (if (null? results)
        #f
        (car results))))

(define (ega-samples-by-dataset dataset-id)
  (call-with-values
      (lambda ()
        (http-get (string-append
                   "https://ega-archive.org/metadata/v2/"
                   "samples?queryBy=dataset&queryId=" dataset-id)
                  #:streaming? #t))
    (lambda (header port)
      (let ((data (json->scm port)))
        (format #t "Data: ~s~%" data)))))
